# Auxilary functions
# Arc functions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
    c‚Çê(a::Arc, x=a.x)

Returns arc cost for `a::Arc` for arc flow `x`
"""
function c‚Çê(a::Arc, x=a.x)
    t‚Çí= a.t‚Çí
    Œ± = a.Œ±
    Œ≤ = a.Œ≤
    V = a.V

    t = t‚Çí * (1 + Œ± * (x/V) ^ Œ≤)

    c = t
    return c
end

"""
    c‚Çê‚Ä≤(a::Arc, x=a.x)

Returns first derivative of arc cost wrt arc flow for `a::Arc` at arc flow `x`
"""
function c‚Çê‚Ä≤(a::Arc, x=a.x)
    t‚Çí= a.t‚Çí
    Œ± = a.Œ±
    Œ≤ = a.Œ≤
    V = a.V

    t‚Ä≤= Œ≤ == 0 ? 0.0 : t‚Çí * Œ± * Œ≤ * (x ^ (Œ≤ - 1))/(V ^ Œ≤)

    c‚Ä≤ = t‚Ä≤
    return c‚Ä≤
end


"""
    c‚Çê‚Ä≥(a::Arc, x=a.x)

Returns second derivative of arc cost wrt arc flow for `a::Arc` at arc flow `x`
"""
function c‚Çê‚Ä≥(a::Arc, x=a.x)
    t‚Çí= a.t‚Çí
    Œ± = a.Œ±
    Œ≤ = a.Œ≤
    x = a.x
    V = a.V

    t‚Ä≥ = Œ≤ == 0 || Œ≤ == 1 ?  0.0 : t‚Çí * Œ± * Œ≤ * (Œ≤ - 1) * (x ^ (Œ≤ - 2))/(V ^ Œ≤)

    c‚Ä≥ = t‚Ä≥
    return c‚Ä≥
end


# Djikstra functions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# NOTE: Node values must match node location (index) in the set of nodes N

"""
    djk(G::Graph, o::Origin)

Djikstra's label setting algorithm

Returns predecessor arc label (index in vector `A`) `L·µñ` for least cost paths from origin `o` on graph `G`
"""
function djk(G::Graph, o::Origin)
    N = G.N
    A = G.A
    K = G.K
    r = o.n

    L·µñ = Vector{Int64}(undef, length(N))     # Predecessor label
    L·∂ú = [Inf for _ in N]                    # Cost label
    L·µñ[r.v] = -1
    L·∂ú[r.v] = 0.0
    
    X = copy(N)                              # Set of open nodes
    
    index = findfirst(x -> (x == r), X)::Int64
    t = X[index]
    deleteat!(X, index)
    while !isempty(X)
        i = t.v
        for j in t.H
            k = K[i,j]
            a = A[k]
            l = L·∂ú[i] + a.c
            if l ‚â§ L·∂ú[j] L·µñ[j], L·∂ú[j] = k, l 
            end
        end
        index = argmin([L·∂ú[n.v] for n in X])
        t = X[index]
        deleteat!(X, index)
    end

    return L·µñ
end

"""
    tree(G::Graph, o::Origin)

Returns tree for graph `G` rooted at origin `o`
"""
function tree(G::Graph, L·µñ)
    N = G.N
    A = G.A

    T = Vector{Node}[[] for _ in N]

    for k in L·µñ
        if k == -1 continue end
        a = A[k]
        t, h = a.t, a.h
        i = t.v
        push!(T[i], h)
    end

    return T
end

"""
    path(G::Graph, L·µñ, r::Node, s::Node)

Returns path between origin node `r` and destination node `s` on graph `G` using predecessor label `L·µñ` (for origin node `r`)
"""
function path(G::Graph, L·µñ, r::Node, s::Node)
    A = G.A

    p = Arc[]

    h = s
    j = h.v
    while j ‚â† r.v
        k = L·µñ[j]
        a = A[k]
        push!(p, a)
        j = a.t.v
    end

    reverse!(p)
    return p
end
path(G::Graph, o::Origin, s::Node) = path(G, o.L·µñ, o.n, s)  # Shorter version

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


# Identfies if arc a is a potential arc wrt flow from origin o, where k = findfirst(x -> (x == o), O)
function ispotential(a::Arc, o::Origin, G::Graph)
    k = o.k
    x ≥‚Çê = a.x ≥[k]
    c‚Çú‚Çï = a.c

    t = a.t
    p·µ£‚Çú = path(G, o, t)
    u ≥‚Çï = 0.0
    for a in p·µ£‚Çú u ≥‚Çï += a.c end
    
    h = a.h
    p·µ£‚Çï = path(G, o, h)
    u ≥‚Çú = 0.0
    for a in p·µ£‚Çï u ≥‚Çú += a.c end
    
    œÄ ≥‚Çê = u ≥‚Çú + c‚Çú‚Çï - u ≥‚Çï 

    bool = x ≥‚Çê > 1e-12 && œÄ ≥‚Çê > 1e-16

    return bool
end

# Shifts flows from higher cost segment to lower cost segment of PAS p 
# on its assosciated origin r‚Çí, given cost difference is greater than Œª
function ùù≥(p::PAS)#, Œª)
    e‚ÇÅ, e‚ÇÇ, o = p.e‚ÇÅ, p.e‚ÇÇ, p.o
    k = o.k

    f‚ÇÅ = e‚ÇÅ.f[k]
    c‚ÇÅ = e‚ÇÅ.c
    c‚ÇÅ‚Ä≤= e‚ÇÅ.c‚Ä≤

    f‚ÇÇ = e‚ÇÇ.f[k]
    c‚ÇÇ = e‚ÇÇ.c
    c‚ÇÇ‚Ä≤= e‚ÇÇ.c‚Ä≤

    #if abs(c‚ÇÇ - c‚ÇÅ) < Œª return 0.0 end
    
    Œî = (c‚ÇÇ - c‚ÇÅ)/(c‚ÇÅ‚Ä≤ + c‚ÇÇ‚Ä≤)
    if isnan(Œî) Œ¥ = 0.0
    elseif Œî ‚â• 0 Œ¥ = min(Œî, f‚ÇÇ)
    else Œ¥ = max(Œî, -f‚ÇÅ) end
    
    return Œ¥
end

function shift(p::PAS, Œ¥)
    # TODO: Adjust cost vals for assingnment

    e‚ÇÅ, e‚ÇÇ, o = p.e‚ÇÅ, p.e‚ÇÇ, p.o
    k = o.k
    
    f, c, c‚Ä≤ = Inf, 0.0, 0.0
    for a in e‚ÇÅ.s
        a.x ≥[k] += Œ¥
        a.x += Œ¥
        a.c = c‚Çê(a)

        if a.x ≥[k] < f f = a.x ≥[k] end
        c += a.c
        c‚Ä≤+= c‚Çê‚Ä≤(a)
    end
    e‚ÇÅ.f[k], e‚ÇÅ.c, e‚ÇÅ.c‚Ä≤ = f, c, c‚Ä≤
    
    f, c, c‚Ä≤ = Inf, 0.0, 0.0
    for a in e‚ÇÇ.s
        a.x ≥[k] += Œ¥
        a.x += Œ¥
        a.c = c‚Çê(a)

        if a.x ≥[k] < f f = a.x ≥[k] end
        c += a.c
        c‚Ä≤+= c‚Çê‚Ä≤(a)
    end
    e‚ÇÇ.f[k], e‚ÇÇ.c, e‚ÇÇ.c‚Ä≤ = f, c, c‚Ä≤
    
    return
end


# PAS identification for arc a wrt origin r using Maximum Cost Search
function MCS(a::Arc, o::Origin, G::Graph)
    depth, maxdepth = 1, 2
    flag = true

    N, A = G.N, G.A

    L‚ÇÅ = o.L·µñ
    t, h = a.t, a.h
    i, j = t.v, h.v
    e‚ÇÅ, e‚ÇÇ = Segment(Arc[], Inf, 0.0, 0.0), Segment(Arc[], Inf, 0.0, 0.0)
    p = PAS(e‚ÇÅ, e‚ÇÇ, o)

    p·µ£‚±º = path(G, L‚ÇÅ, r, j)

    while flag
        # Intialize
        l = zeros(Int64, length(N))
        for a in p·µ£‚±º l[a.t] = -1 end
        l[i] = 1
        l[j] = 1

        L‚ÇÇ = Vector{Node}(undef, length(N))
        L‚ÇÇ[j] = t 


        # Iterate
        v = i
        while true
            
            f = 0.0
            for u in N[v].T 
                k = findfirst(x -> (x == N[v].v), N[u].H)::Int64
                x = x ≥‚Çê[r][u][k]
                k = K[u,v]
                a = A[k]
                c = a.c
                if x > 1e-12 && c > f f, t = c, p end
            end
            L‚ÇÇ[v] = N[u]
            v = u   
            
            # PAS found
            if l[v] == -1      
                s‚ÇÅ = path(G, L‚ÇÅ, t, j)
                s‚ÇÇ = path(G, L‚ÇÇ, t, j)
                shift(p, ùù≥(p))
                bool,_ = ispotential(a, o, G)
                if !bool || depth == maxdepth flag = false
                else depth += 1 end
                break
            # Cycle found
            elseif l[v] == 1
                if depth == maxdepth flag = false
                else
                    p‚Çï‚Çú = path(G, L‚ÇÇ, h, t)
                    push!(p‚Çï‚Çú, a)   
                    Œ¥ = Inf
                    k = o.k
                    for a in p‚Çï‚Çú if a.x ≥[k] ‚â§ Œ¥ Œ¥ = a.x ≥[k] end end
                    shift(PAS(p‚Çï‚Çú , Int64[], o), Œ¥)
                    depth += 1
                end
                break
            # Continue
            else l[v] = 1
            end
        end
    end

    return p
end